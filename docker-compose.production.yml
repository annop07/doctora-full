version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: doctora-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-doctorbook}
      POSTGRES_USER: ${DB_USERNAME:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - doctora-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Spring Boot
  backend:
    build:
      context: ./doctora-spring-boot
      dockerfile: Dockerfile
    container_name: doctora-backend-prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-doctorbook}
      DB_USERNAME: ${DB_USERNAME:-admin}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      SERVER_PORT: 8082
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
      SPRING_PROFILES_ACTIVE: prod
    ports:
      - "8082:8082"
    networks:
      - doctora-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/specialties"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Next.js
  frontend:
    build:
      context: ./FrontendDoctora
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:8082}
    container_name: doctora-frontend-prod
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:8082}
      NODE_ENV: production
    ports:
      - "3000:3000"
    networks:
      - doctora-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local

networks:
  doctora-network:
    driver: bridge
